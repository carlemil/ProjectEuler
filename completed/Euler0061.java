
package completed;

import com.kjellstrand.euler.Tools;

import java.util.ArrayList;
import java.util.List;

// Triangle, square, pentagonal, hexagonal, heptagonal, and
// octagonal numbers are all figurate (polygonal) numbers and
// are generated by the following formulae:
//
// Triangle P3, n=n(n+1)/2 1, 3, 6, 10, 15, ...
// Square P4, n=n2 1, 4, 9, 16, 25, ...
// Pentagonal P5,n=n(3n−1)/2 1, 5, 12, 22, 35, ...
// Hexagonal P6, n=n(2n−1) 1, 6, 15, 28, 45, ...
// Heptagonal P7,n=n(5n−3)/2 1, 7, 18, 34, 55, ...
// Octagonal P8, n=n(3n−2) 1, 8, 21, 40, 65, ...
// The ordered set of three 4-digit numbers: 8128, 2882, 8281,
// has three interesting properties.
//
// The set is cyclic, in that the last two digits of each number
// is the first two digits of the next number (including
// the last number with the first).
// Each polygonal type: triangle (P3,127=8128),
// square (P4,91=8281), and pentagonal (P5,44=2882),
// is represented by a different number in the set.
// This is the only set of 4-digit numbers with this property.
// Find the sum of the only ordered set of six cyclic 4-digit
// numbers for which each polygonal type: triangle, square,
// pentagonal, hexagonal, heptagonal, and octagonal, is
// represented by a different number in the set.

public class Euler0061 {

    private static final List<Integer[]>[] mArrayList = new ArrayList[100];

    private static final boolean mSearched[] = new boolean[6];

    private static int mFirst = 0;

    public static void main(String[] args) {
        long time = System.currentTimeMillis();

        for (int i = 1; i < 142; i++) {
            setData(0, (int) Tools.getTriangle(i));
            setData(1, (int) Tools.getSquare(i));
            setData(2, (int) Tools.getPentagonal(i));
            setData(3, (int) Tools.getHexagonal(i));
            setData(4, (int) Tools.getHeptagonal(i));
            // setData(5, (int) Tools.getOctagonal(i));
        }
        System.out.println("time: " + (System.currentTimeMillis() - time) + "ms");

        // Search through the data.
        int res = 0;
        for (int n = 1; n < 142; n++) {
            int t = (int) Tools.getOctagonal(n);
            if (t >= 1000 && t < 10000) {
                mSearched[5] = true;
                mFirst = getFirstTwoDigits(t);
                res = search(t, 1);
                if (res != 0) {
                    res += t;
                    break;
                }
            }
        }
        System.out.println(res);
        System.out.println("time: " + (System.currentTimeMillis() - time) + "ms");
    }

    private static int search(int n, int depth) {
        int l = getLastTwoDigits(n);

        List<Integer[]> list = mArrayList[l];
        if (list != null) {

            for (Integer[] array : list) {
                if (!mSearched[array[0]]) {
                    int last = getLastTwoDigits(array[1]);
                    if (depth >= 5 && last == mFirst) {
                        return array[1];
                    } else {
                        mSearched[array[0]] = true;
                        int ret = search(array[1], depth + 1);
                        if (ret != 0) {
                            return array[1] + ret;
                        }
                        mSearched[array[0]] = false;
                    }
                }
            }
        }
        return 0;
    }

    private static void setData(int type, int n) {
        if (n >= 1000 && n < 10000) {
            int first = getFirstTwoDigits(n);
            List<Integer[]> list = mArrayList[first];
            if (list == null) {
                list = new ArrayList<Integer[]>();
                mArrayList[first] = list;
            }
            Integer[] array = new Integer[2];
            array[0] = type;
            array[1] = n;
            list.add(array);
        }
    }

    // return the first 2 digits from a 4 digit number
    private static int getFirstTwoDigits(long n) {
        return (int) (n / 100);
    }

    // return the last 2 digits
    private static int getLastTwoDigits(long n) {
        return (int) (n % 100);
    }
}
